{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../node_modules/uuid/lib/bytesToUuid.js","webpack:///../node_modules/uuid/lib/rng-browser.js","webpack:///../node_modules/uuid/v4.js","webpack:///./config_ctrl.ts","webpack:///./datasource.ts","webpack:///./query_ctrl.ts"],"names":[],"mappings":"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","file":"module.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./module.ts\");\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([bth[buf[i++]], bth[buf[i++]], \n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]], '-',\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]],\n\tbth[buf[i++]], bth[buf[i++]]]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","export class AwsAthenaDatasourceConfigCtrl {\n    static templateUrl = 'partials/config.html'\n    current: any\n    accessKeyExist: any\n    secretKeyExist: any\n    datasourceSrv: any\n    authTypes: any\n\n    /** @ngInject */\n    constructor($scope: any, datasourceSrv: any) {\n        this.current.jsonData.authType = this.current.jsonData.authType || 'credentials'\n\n        this.accessKeyExist = this.current.secureJsonFields.accessKey\n        this.secretKeyExist = this.current.secureJsonFields.secretKey\n        this.datasourceSrv = datasourceSrv\n        this.authTypes = [\n            { name: 'Access & secret key', value: 'keys' },\n            { name: 'Credentials file', value: 'credentials' },\n            { name: 'ARN', value: 'arn' },\n        ]\n    }\n\n    resetAccessKey() {\n        this.accessKeyExist = false\n    }\n\n    resetSecretKey() {\n        this.secretKeyExist = false\n    }\n}\n","import TableModel from 'grafana/app/core/table_model'\nimport _ from 'lodash'\nimport uuidv4 from 'uuid/v4'\n\nexport class AwsAthenaDatasource {\n    type: string\n    url: string\n    name: string\n    id: string\n    defaultRegion: string\n    q: any\n    $q: any\n    backendSrv: any\n    templateSrv: any\n    timeSrv: any\n\n    constructor(instanceSettings: any, $q: any, backendSrv: any, templateSrv: any, timeSrv: any) {\n        this.type = instanceSettings.type\n        this.url = instanceSettings.url\n        this.name = instanceSettings.name\n        this.id = instanceSettings.id\n        this.defaultRegion = instanceSettings.jsonData.defaultRegion\n        this.q = $q\n        this.backendSrv = backendSrv\n        this.templateSrv = templateSrv\n        this.timeSrv = timeSrv\n    }\n\n    query(options: any) {\n        const query = this.buildQueryParameters(options)\n        query.targets = query.targets.filter((t: any) => !t.hide)\n\n        if (query.targets.length <= 0) {\n            return this.q.when({ data: [] })\n        }\n\n        return this.doRequest({\n            data: query,\n        })\n    }\n\n    testDatasource() {\n        return this.doMetricQueryRequest('named_query_names', {\n            region: this.defaultRegion,\n        })\n            .then((res: any) => {\n                return this.q.when({ status: 'success', message: 'Data source is working', title: 'Success' })\n            })\n            .catch((err: Error) => {\n                return { status: 'error', message: err.message, title: 'Error' }\n            })\n    }\n\n    doRequest(options: any): Promise<any> {\n        return this.backendSrv\n            .datasourceRequest({\n                url: '/api/tsdb/query',\n                method: 'POST',\n                data: {\n                    from: options.data.range.from.valueOf().toString(),\n                    to: options.data.range.to.valueOf().toString(),\n                    queries: options.data.targets,\n                },\n            })\n            .then((result: any) => {\n                const res: any = []\n                for (const query of options.data.targets) {\n                    const r = result.data.results[query.refId]\n                    if (!r) {\n                        continue\n                    }\n\n                    if (!_.isEmpty(r.series)) {\n                        _.forEach(r.series, (s) => {\n                            res.push({ target: s.name, datapoints: s.points })\n                        })\n                    }\n                    if (!_.isEmpty(r.tables)) {\n                        _.forEach(r.tables, (t) => {\n                            const table = new TableModel()\n                            table.columns = t.columns\n                            table.rows = t.rows\n                            res.push(table)\n                        })\n                    }\n                }\n\n                result.data = res\n                return result\n            })\n    }\n\n    buildQueryParameters(options: any) {\n        const targets = _.map(options.targets, (target) => {\n            return {\n                refId: target.refId,\n                hide: target.hide,\n                datasourceId: this.id,\n                queryType: 'timeSeriesQuery',\n                format: target.format || 'timeseries',\n                region: this.templateSrv.replace(target.region, options.scopedVars) || this.defaultRegion,\n                timestampColumn: target.timestampColumn,\n                valueColumn: target.valueColumn,\n                legendFormat: target.legendFormat || '',\n                input: {\n                    queryExecutionId: this.templateSrv.replace(target.queryExecutionId, options.scopedVars) || uuidv4(),\n                },\n            }\n        })\n\n        options.targets = targets\n        return options\n    }\n\n    metricFindQuery(query: any) {\n        let region\n\n        const namedQueryNamesQuery = query.match(/^named_query_names\\(([^\\)]+?)\\)/)\n        if (namedQueryNamesQuery) {\n            region = namedQueryNamesQuery[1]\n            return this.doMetricQueryRequest('named_query_names', {\n                region: this.templateSrv.replace(region),\n            })\n        }\n\n        const namedQueryQueryQuery = query.match(/^named_query_queries\\(([^,]+?),\\s?(.+)\\)/)\n        if (namedQueryQueryQuery) {\n            region = namedQueryQueryQuery[1]\n            const pattern = namedQueryQueryQuery[2]\n            return this.doMetricQueryRequest('named_query_queries', {\n                region: this.templateSrv.replace(region),\n                pattern: this.templateSrv.replace(pattern, {}, 'regex'),\n            })\n        }\n\n        const queryExecutionIdsQuery = query.match(/^query_execution_ids\\(([^,]+?),\\s?([^,]+?),\\s?(.+)\\)/)\n        if (queryExecutionIdsQuery) {\n            region = queryExecutionIdsQuery[1]\n            const limit = queryExecutionIdsQuery[2]\n            const pattern = queryExecutionIdsQuery[3]\n            return this.doMetricQueryRequest('query_execution_ids', {\n                region: this.templateSrv.replace(region),\n                limit: parseInt(this.templateSrv.replace(limit), 10),\n                pattern: this.templateSrv.replace(pattern, {}, 'regex'),\n            })\n        }\n\n        return this.q.when([])\n    }\n\n    async doMetricQueryRequest(subtype: any, parameters: any) {\n        const range = this.timeSrv.timeRange()\n        const response = await this.execMetricQueryRequest(this.id, range, subtype, parameters)\n        if (response.status < 200 || response.status > 299) {\n            throw Error('Metric response failed: ' + response.statusText)\n        }\n\n        return this.transformSuggestDataFromTable(response.data)\n    }\n\n    execMetricQueryRequest(id: any, range: any, subtype: any, parameters: any): Promise<any> {\n        return this.backendSrv.datasourceRequest({\n            url: '/api/tsdb/query',\n            method: 'POST',\n            data: {\n                from: range.from.valueOf().toString(),\n                to: range.to.valueOf().toString(),\n                queries: [\n                    _.extend(\n                        {\n                            refId: 'metricFindQuery',\n                            datasourceId: id,\n                            queryType: 'metricFindQuery',\n                            subtype,\n                        },\n                        parameters\n                    ),\n                ],\n            },\n        })\n    }\n\n    transformSuggestDataFromTable(suggestData: any) {\n        return _.map(suggestData.results.metricFindQuery.tables[0].rows, (v) => {\n            return {\n                text: v[0],\n                value: v[1],\n            }\n        })\n    }\n}\n","import { QueryCtrl } from 'grafana/app/plugins/sdk'\n\nexport class AwsAthenaDatasourceQueryCtrl extends QueryCtrl {\n    static templateUrl = 'partials/query.editor.html'\n    scope: any\n    target: any\n    panelCtrl: any\n\n    constructor($scope: any, $injector: any) {\n        super($scope, $injector)\n\n        this.scope = $scope\n        this.target.format = this.target.format || this.target.type || 'timeseries'\n        this.target.region = this.target.region || ''\n        this.target.timestampColumn = this.target.timestampColumn || ''\n        this.target.valueColumn = this.target.valueColumn || ''\n        this.target.legendFormat = this.target.legendFormat || ''\n        this.target.queryExecutionId = this.target.queryExecutionId || ''\n    }\n\n    onChangeInternal() {\n        this.panelCtrl.refresh()\n    }\n}\n"],"sourceRoot":""}